version: '3.7'

services:
  proxy:
    image: nginx:1.19.6-alpine
    container_name: parrot-jira-proxy
    ports:
      - '80:80'
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    networks:
      - parrot-frontend-network
      - parrot-api-gateway-network
    depends_on:
      - frontend
      - api-gateway

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: parrot-jira-frontend
    restart: unless-stopped
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - parrot-frontend-network
    depends_on:
      - api-gateway

  task-tracker:
    build:
      context: ./task-tracker
      dockerfile: Dockerfile
    container_name: parrot-jira-tasks
    environment:
      - NODE_ENV=production
      - PORT=${PORT}
      - REDIS_HOST=redis
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db-tasks
      - POSTGRES_DB=${POSTGRES_DB}
      - USER_TOPIC=${USER_TOPIC}
      - TASK_TOPIC=${TASK_TOPIC}
      - TASK_STATUS_TOPIC=${TASK_STATUS_TOPIC}
    restart: unless-stopped
    networks:
      - parrot-tasks-network
      - parrot-kafka-network
    depends_on:
      - db-tasks
      - redis

  db-tasks:
    image: postgres:13.1-alpine
    container_name: parrot-jira-api-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - parrot-jira-tasks-db:/var/lib/postgresql/data
    networks:
      - parrot-tasks-network

  redis:
    image: redis:6.0.10-alpine
    container_name: parrot-jira-redis
    command: redis-server
    volumes:
      - parrot-jira-redis-data:/var/lib/redis/data
    restart: unless-stopped
    networks:
      - parrot-tasks-network
      - parrot-api-gateway-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: parrot-jira-api-gateway
    environment:
      - NODE_ENV=production
      - PORT=${PORT_API_GATEWAY}
      - REDIS_HOST=redis
      - TASKS_HOST=task-tracker
      - POSTGRES_USER=${POSTGRES_USER_API_GATEWAY}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_API_GATEWAY}
      - POSTGRES_HOST=db-api-gateway
      - POSTGRES_DB=${POSTGRES_DB_API_GATEWAY}
      - JWT_SECRET=${JWT_SECRET}
      - USER_TOPIC=${USER_TOPIC}
    restart: unless-stopped
    links:
      - task-tracker
    networks:
      - parrot-api-gateway-network
      - parrot-tasks-network
      - parrot-kafka-network
      - parrot-frontend-network
    depends_on:
      - db-api-gateway
      - redis
      - task-tracker

  db-api-gateway:
    image: postgres:13.1-alpine
    container_name: parrot-jira-api-gateway-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER_API_GATEWAY}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_API_GATEWAY}
      - POSTGRES_DB=${POSTGRES_DB_API_GATEWAY}
    volumes:
      - parrot-jira-api-gateway-db:/var/lib/postgresql/data
    networks:
      - parrot-api-gateway-network

  accounting:
    build:
      context: ./accounting
      dockerfile: Dockerfile
    container_name: parrot-jira-accounting
    environment:
      - NODE_ENV=production
      - PORT=${PORT_ACCOUNTING}
      - REDIS_HOST=redis
      - POSTGRES_USER=${POSTGRES_USER_ACCOUNTING}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_ACCOUNTING}
      - POSTGRES_HOST=db-accounting
      - POSTGRES_DB=${POSTGRES_DB_ACCOUNTING}
      - JWT_SECRET=${JWT_SECRET}
      - USER_TOPIC=${USER_TOPIC}
      - TASK_TOPIC=${TASK_TOPIC}
      - TASK_STATUS_TOPIC=${TASK_STATUS_TOPIC}
    restart: unless-stopped
    networks:
      - parrot-api-gateway-network
      - parrot-accounting-network
      - parrot-kafka-network
    depends_on:
      - db-accounting

  db-accounting:
    image: postgres:13.1-alpine
    container_name: parrot-jira-accounting-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER_ACCOUNTING}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_ACCOUNTING}
      - POSTGRES_DB=${POSTGRES_DB_ACCOUNTING}
    volumes:
      - parrot-jira-accounting-db:/var/lib/postgresql/data
    networks:
      - parrot-accounting-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - '2181:2181'
    networks:
      - parrot-kafka-network

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    ports:
      - '9092:9092'
      - '29092:29092'
    links:
      - zookeeper
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_CREATE_TOPICS=topic-test:1:1
      - KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS=kafka:29092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - parrot-jira-kafka-data:/var/lib/kafka/data
    networks:
      - parrot-kafka-network

  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'

    networks:
      - parrot-kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - '3004:8080'
    restart: unless-stopped
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
    networks:
      - parrot-kafka-network

  schema-registry-ui:
    image: landoop/schema-registry-ui:latest
    container_name: schema-registry-ui
    hostname: schema-registry-ui
    ports:
      - '8000:8000'
    environment:
      SCHEMAREGISTRY_URL: 'http://schema-registry:8081'
      PROXY: 'true'
      ALLOW_GLOBAL: 'true'
      ALLOW_TRANSITIVE: 'true'
      ALLOW_DELETION: 'true'
    depends_on:
      - schema-registry
    networks:
      - parrot-kafka-network

  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   ports:
  #     - 9100:9000
  #   environment:
  #     - KAFKA_BROKERCONNECT=kafka:9092
  #     - JVM_OPTS=-Xms32M -Xmx64M
  #   depends_on:
  #     - kafka
  #   networks:
  #     - parrot-kafka-network

networks:
  parrot-tasks-network:
    driver: bridge
  parrot-frontend-network:
    driver: bridge
  parrot-api-gateway-network:
    driver: bridge
  parrot-kafka-network:
    driver: bridge
  parrot-accounting-network:
    driver: bridge

volumes:
  parrot-jira-redis-data:
  parrot-jira-tasks-db:
  parrot-jira-api-gateway-db:
  parrot-jira-kafka-data:
  parrot-jira-accounting-db:
